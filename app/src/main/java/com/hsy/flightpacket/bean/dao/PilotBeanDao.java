package com.hsy.flightpacket.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PILOT_BEAN".
*/
public class PilotBeanDao extends AbstractDao<PilotBean, Long> {

    public static final String TABLENAME = "PILOT_BEAN";

    /**
     * Properties of entity PilotBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DateTime = new Property(1, java.util.Date.class, "dateTime", false, "DATE_TIME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Model = new Property(3, String.class, "model", false, "MODEL");
        public final static Property Flyer = new Property(4, String.class, "flyer", false, "FLYER");
        public final static Property Pilot = new Property(5, String.class, "pilot", false, "PILOT");
        public final static Property GoOutPic = new Property(6, String.class, "goOutPic", false, "GO_OUT_PIC");
        public final static Property ReturnPic = new Property(7, String.class, "returnPic", false, "RETURN_PIC");
        public final static Property NaviInfo = new Property(8, String.class, "naviInfo", false, "NAVI_INFO");
        public final static Property Landing = new Property(9, java.util.Date.class, "landing", false, "LANDING");
        public final static Property Renewal = new Property(10, java.util.Date.class, "renewal", false, "RENEWAL");
    };


    public PilotBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PilotBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PILOT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE_TIME\" INTEGER," + // 1: dateTime
                "\"TITLE\" TEXT," + // 2: title
                "\"MODEL\" TEXT," + // 3: model
                "\"FLYER\" TEXT," + // 4: flyer
                "\"PILOT\" TEXT," + // 5: pilot
                "\"GO_OUT_PIC\" TEXT," + // 6: goOutPic
                "\"RETURN_PIC\" TEXT," + // 7: returnPic
                "\"NAVI_INFO\" TEXT," + // 8: naviInfo
                "\"LANDING\" INTEGER," + // 9: landing
                "\"RENEWAL\" INTEGER);"); // 10: renewal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PILOT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PilotBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(2, dateTime.getTime());
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(4, model);
        }
 
        String flyer = entity.getFlyer();
        if (flyer != null) {
            stmt.bindString(5, flyer);
        }
 
        String pilot = entity.getPilot();
        if (pilot != null) {
            stmt.bindString(6, pilot);
        }
 
        String goOutPic = entity.getGoOutPic();
        if (goOutPic != null) {
            stmt.bindString(7, goOutPic);
        }
 
        String returnPic = entity.getReturnPic();
        if (returnPic != null) {
            stmt.bindString(8, returnPic);
        }
 
        String naviInfo = entity.getNaviInfo();
        if (naviInfo != null) {
            stmt.bindString(9, naviInfo);
        }
 
        java.util.Date landing = entity.getLanding();
        if (landing != null) {
            stmt.bindLong(10, landing.getTime());
        }
 
        java.util.Date renewal = entity.getRenewal();
        if (renewal != null) {
            stmt.bindLong(11, renewal.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PilotBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(2, dateTime.getTime());
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(4, model);
        }
 
        String flyer = entity.getFlyer();
        if (flyer != null) {
            stmt.bindString(5, flyer);
        }
 
        String pilot = entity.getPilot();
        if (pilot != null) {
            stmt.bindString(6, pilot);
        }
 
        String goOutPic = entity.getGoOutPic();
        if (goOutPic != null) {
            stmt.bindString(7, goOutPic);
        }
 
        String returnPic = entity.getReturnPic();
        if (returnPic != null) {
            stmt.bindString(8, returnPic);
        }
 
        String naviInfo = entity.getNaviInfo();
        if (naviInfo != null) {
            stmt.bindString(9, naviInfo);
        }
 
        java.util.Date landing = entity.getLanding();
        if (landing != null) {
            stmt.bindLong(10, landing.getTime());
        }
 
        java.util.Date renewal = entity.getRenewal();
        if (renewal != null) {
            stmt.bindLong(11, renewal.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PilotBean readEntity(Cursor cursor, int offset) {
        PilotBean entity = new PilotBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // dateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // model
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flyer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pilot
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // goOutPic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // returnPic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // naviInfo
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // landing
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // renewal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PilotBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDateTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlyer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPilot(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoOutPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReturnPic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNaviInfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLanding(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setRenewal(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PilotBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PilotBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
