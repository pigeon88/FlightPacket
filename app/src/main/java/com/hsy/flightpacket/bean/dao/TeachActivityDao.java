package com.hsy.flightpacket.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACH_ACTIVITY".
*/
public class TeachActivityDao extends AbstractDao<TeachActivity, Long> {

    public static final String TABLENAME = "TEACH_ACTIVITY";

    /**
     * Properties of entity TeachActivity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Jihao = new Property(1, String.class, "jihao", false, "JIHAO");
        public final static Property Jizhanghao = new Property(2, String.class, "jizhanghao", false, "JIZHANGHAO");
        public final static Property Shifei = new Property(3, Boolean.class, "shifei", false, "SHIFEI");
        public final static Property Zhengjia = new Property(4, String.class, "zhengjia", false, "ZHENGJIA");
        public final static Property Fujia = new Property(5, String.class, "fujia", false, "FUJIA");
        public final static Property PlanId = new Property(6, Long.class, "planId", false, "PLAN_ID");
    };


    public TeachActivityDao(DaoConfig config) {
        super(config);
    }
    
    public TeachActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACH_ACTIVITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"JIHAO\" TEXT," + // 1: jihao
                "\"JIZHANGHAO\" TEXT," + // 2: jizhanghao
                "\"SHIFEI\" INTEGER," + // 3: shifei
                "\"ZHENGJIA\" TEXT," + // 4: zhengjia
                "\"FUJIA\" TEXT," + // 5: fujia
                "\"PLAN_ID\" INTEGER);"); // 6: planId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACH_ACTIVITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TeachActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jihao = entity.getJihao();
        if (jihao != null) {
            stmt.bindString(2, jihao);
        }
 
        String jizhanghao = entity.getJizhanghao();
        if (jizhanghao != null) {
            stmt.bindString(3, jizhanghao);
        }
 
        Boolean shifei = entity.getShifei();
        if (shifei != null) {
            stmt.bindLong(4, shifei ? 1L: 0L);
        }
 
        String zhengjia = entity.getZhengjia();
        if (zhengjia != null) {
            stmt.bindString(5, zhengjia);
        }
 
        String fujia = entity.getFujia();
        if (fujia != null) {
            stmt.bindString(6, fujia);
        }
 
        Long planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindLong(7, planId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TeachActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jihao = entity.getJihao();
        if (jihao != null) {
            stmt.bindString(2, jihao);
        }
 
        String jizhanghao = entity.getJizhanghao();
        if (jizhanghao != null) {
            stmt.bindString(3, jizhanghao);
        }
 
        Boolean shifei = entity.getShifei();
        if (shifei != null) {
            stmt.bindLong(4, shifei ? 1L: 0L);
        }
 
        String zhengjia = entity.getZhengjia();
        if (zhengjia != null) {
            stmt.bindString(5, zhengjia);
        }
 
        String fujia = entity.getFujia();
        if (fujia != null) {
            stmt.bindString(6, fujia);
        }
 
        Long planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindLong(7, planId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TeachActivity readEntity(Cursor cursor, int offset) {
        TeachActivity entity = new TeachActivity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jihao
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jizhanghao
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // shifei
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zhengjia
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fujia
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // planId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TeachActivity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJihao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJizhanghao(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShifei(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setZhengjia(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFujia(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlanId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TeachActivity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TeachActivity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
