package com.hsy.flightpacket.bean.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAIN_PLAN".
*/
public class TrainPlanDao extends AbstractDao<TrainPlan, Long> {

    public static final String TABLENAME = "TRAIN_PLAN";

    /**
     * Properties of entity TrainPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Subject = new Property(1, String.class, "subject", false, "SUBJECT");
        public final static Property TrainContent = new Property(2, String.class, "trainContent", false, "TRAIN_CONTENT");
        public final static Property TrainTime = new Property(3, java.util.Date.class, "trainTime", false, "TRAIN_TIME");
        public final static Property SupreReview = new Property(4, String.class, "supreReview", false, "SUPRE_REVIEW");
        public final static Property TeamReview = new Property(5, String.class, "teamReview", false, "TEAM_REVIEW");
        public final static Property PicUrl = new Property(6, String.class, "picUrl", false, "PIC_URL");
        public final static Property SupreReview2 = new Property(7, String.class, "supreReview2", false, "SUPRE_REVIEW2");
        public final static Property TeamReview2 = new Property(8, String.class, "teamReview2", false, "TEAM_REVIEW2");
        public final static Property PicUrl2 = new Property(9, String.class, "picUrl2", false, "PIC_URL2");
        public final static Property ClassId = new Property(10, Long.class, "classId", false, "CLASS_ID");
        public final static Property TrainPlanName = new Property(11, String.class, "trainPlanName", false, "TRAIN_PLAN_NAME");
    };

    private DaoSession daoSession;

    private Query<TrainPlan> pClass_TrainPlenQuery;
    private Query<TrainPlan> student_TrainPlanListQuery;

    public TrainPlanDao(DaoConfig config) {
        super(config);
    }
    
    public TrainPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAIN_PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUBJECT\" TEXT," + // 1: subject
                "\"TRAIN_CONTENT\" TEXT," + // 2: trainContent
                "\"TRAIN_TIME\" INTEGER," + // 3: trainTime
                "\"SUPRE_REVIEW\" TEXT," + // 4: supreReview
                "\"TEAM_REVIEW\" TEXT," + // 5: teamReview
                "\"PIC_URL\" TEXT," + // 6: picUrl
                "\"SUPRE_REVIEW2\" TEXT," + // 7: supreReview2
                "\"TEAM_REVIEW2\" TEXT," + // 8: teamReview2
                "\"PIC_URL2\" TEXT," + // 9: picUrl2
                "\"CLASS_ID\" INTEGER," + // 10: classId
                "\"TRAIN_PLAN_NAME\" TEXT);"); // 11: trainPlanName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAIN_PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrainPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String trainContent = entity.getTrainContent();
        if (trainContent != null) {
            stmt.bindString(3, trainContent);
        }
 
        java.util.Date trainTime = entity.getTrainTime();
        if (trainTime != null) {
            stmt.bindLong(4, trainTime.getTime());
        }
 
        String supreReview = entity.getSupreReview();
        if (supreReview != null) {
            stmt.bindString(5, supreReview);
        }
 
        String teamReview = entity.getTeamReview();
        if (teamReview != null) {
            stmt.bindString(6, teamReview);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(7, picUrl);
        }
 
        String supreReview2 = entity.getSupreReview2();
        if (supreReview2 != null) {
            stmt.bindString(8, supreReview2);
        }
 
        String teamReview2 = entity.getTeamReview2();
        if (teamReview2 != null) {
            stmt.bindString(9, teamReview2);
        }
 
        String picUrl2 = entity.getPicUrl2();
        if (picUrl2 != null) {
            stmt.bindString(10, picUrl2);
        }
 
        Long classId = entity.getClassId();
        if (classId != null) {
            stmt.bindLong(11, classId);
        }
 
        String trainPlanName = entity.getTrainPlanName();
        if (trainPlanName != null) {
            stmt.bindString(12, trainPlanName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrainPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String trainContent = entity.getTrainContent();
        if (trainContent != null) {
            stmt.bindString(3, trainContent);
        }
 
        java.util.Date trainTime = entity.getTrainTime();
        if (trainTime != null) {
            stmt.bindLong(4, trainTime.getTime());
        }
 
        String supreReview = entity.getSupreReview();
        if (supreReview != null) {
            stmt.bindString(5, supreReview);
        }
 
        String teamReview = entity.getTeamReview();
        if (teamReview != null) {
            stmt.bindString(6, teamReview);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(7, picUrl);
        }
 
        String supreReview2 = entity.getSupreReview2();
        if (supreReview2 != null) {
            stmt.bindString(8, supreReview2);
        }
 
        String teamReview2 = entity.getTeamReview2();
        if (teamReview2 != null) {
            stmt.bindString(9, teamReview2);
        }
 
        String picUrl2 = entity.getPicUrl2();
        if (picUrl2 != null) {
            stmt.bindString(10, picUrl2);
        }
 
        Long classId = entity.getClassId();
        if (classId != null) {
            stmt.bindLong(11, classId);
        }
 
        String trainPlanName = entity.getTrainPlanName();
        if (trainPlanName != null) {
            stmt.bindString(12, trainPlanName);
        }
    }

    @Override
    protected final void attachEntity(TrainPlan entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrainPlan readEntity(Cursor cursor, int offset) {
        TrainPlan entity = new TrainPlan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subject
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trainContent
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // trainTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // supreReview
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // teamReview
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // supreReview2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // teamReview2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // picUrl2
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // classId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // trainPlanName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrainPlan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrainContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTrainTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSupreReview(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTeamReview(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSupreReview2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTeamReview2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicUrl2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClassId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setTrainPlanName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrainPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrainPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "trainPlen" to-many relationship of PClass. */
    public List<TrainPlan> _queryPClass_TrainPlen(Long classId) {
        synchronized (this) {
            if (pClass_TrainPlenQuery == null) {
                QueryBuilder<TrainPlan> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ClassId.eq(null));
                pClass_TrainPlenQuery = queryBuilder.build();
            }
        }
        Query<TrainPlan> query = pClass_TrainPlenQuery.forCurrentThread();
        query.setParameter(0, classId);
        return query.list();
    }

    /** Internal query to resolve the "trainPlanList" to-many relationship of Student. */
    public List<TrainPlan> _queryStudent_TrainPlanList(Long sId) {
        synchronized (this) {
            if (student_TrainPlanListQuery == null) {
                QueryBuilder<TrainPlan> queryBuilder = queryBuilder();
                queryBuilder.join(BindTrainPlanStudent.class, BindTrainPlanStudentDao.Properties.TId)
                    .where(BindTrainPlanStudentDao.Properties.SId.eq(sId));
                student_TrainPlanListQuery = queryBuilder.build();
            }
        }
        Query<TrainPlan> query = student_TrainPlanListQuery.forCurrentThread();
        query.setParameter(0, sId);
        return query.list();
    }

}
