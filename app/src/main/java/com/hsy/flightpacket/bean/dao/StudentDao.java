package com.hsy.flightpacket.bean.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CodeName = new Property(2, String.class, "codeName", false, "CODE_NAME");
        public final static Property Marshalling = new Property(3, String.class, "marshalling", false, "MARSHALLING");
        public final static Property NativePlace = new Property(4, String.class, "nativePlace", false, "NATIVE_PLACE");
        public final static Property Nation = new Property(5, String.class, "nation", false, "NATION");
        public final static Property Birth = new Property(6, java.util.Date.class, "birth", false, "BIRTH");
        public final static Property Enlist = new Property(7, java.util.Date.class, "enlist", false, "ENLIST");
        public final static Property Join = new Property(8, java.util.Date.class, "join", false, "JOIN");
        public final static Property Education = new Property(9, String.class, "education", false, "EDUCATION");
    };

    private DaoSession daoSession;

    private Query<Student> trainPlan_StudentsQuery;

    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CODE_NAME\" TEXT," + // 2: codeName
                "\"MARSHALLING\" TEXT," + // 3: marshalling
                "\"NATIVE_PLACE\" TEXT," + // 4: nativePlace
                "\"NATION\" TEXT," + // 5: nation
                "\"BIRTH\" INTEGER," + // 6: birth
                "\"ENLIST\" INTEGER," + // 7: enlist
                "\"JOIN\" INTEGER," + // 8: join
                "\"EDUCATION\" TEXT);"); // 9: education
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String codeName = entity.getCodeName();
        if (codeName != null) {
            stmt.bindString(3, codeName);
        }
 
        String marshalling = entity.getMarshalling();
        if (marshalling != null) {
            stmt.bindString(4, marshalling);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(5, nativePlace);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(6, nation);
        }
 
        java.util.Date birth = entity.getBirth();
        if (birth != null) {
            stmt.bindLong(7, birth.getTime());
        }
 
        java.util.Date enlist = entity.getEnlist();
        if (enlist != null) {
            stmt.bindLong(8, enlist.getTime());
        }
 
        java.util.Date join = entity.getJoin();
        if (join != null) {
            stmt.bindLong(9, join.getTime());
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(10, education);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String codeName = entity.getCodeName();
        if (codeName != null) {
            stmt.bindString(3, codeName);
        }
 
        String marshalling = entity.getMarshalling();
        if (marshalling != null) {
            stmt.bindString(4, marshalling);
        }
 
        String nativePlace = entity.getNativePlace();
        if (nativePlace != null) {
            stmt.bindString(5, nativePlace);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(6, nation);
        }
 
        java.util.Date birth = entity.getBirth();
        if (birth != null) {
            stmt.bindLong(7, birth.getTime());
        }
 
        java.util.Date enlist = entity.getEnlist();
        if (enlist != null) {
            stmt.bindLong(8, enlist.getTime());
        }
 
        java.util.Date join = entity.getJoin();
        if (join != null) {
            stmt.bindLong(9, join.getTime());
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(10, education);
        }
    }

    @Override
    protected final void attachEntity(Student entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // codeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // marshalling
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nativePlace
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nation
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // birth
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // enlist
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // join
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // education
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCodeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMarshalling(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNativePlace(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirth(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setEnlist(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setJoin(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setEducation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "students" to-many relationship of TrainPlan. */
    public List<Student> _queryTrainPlan_Students(Long tId) {
        synchronized (this) {
            if (trainPlan_StudentsQuery == null) {
                QueryBuilder<Student> queryBuilder = queryBuilder();
                queryBuilder.join(BindTrainPlanStudent.class, BindTrainPlanStudentDao.Properties.SId)
                    .where(BindTrainPlanStudentDao.Properties.TId.eq(tId));
                trainPlan_StudentsQuery = queryBuilder.build();
            }
        }
        Query<Student> query = trainPlan_StudentsQuery.forCurrentThread();
        query.setParameter(0, tId);
        return query.list();
    }

}
